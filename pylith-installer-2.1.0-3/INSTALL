Installation instructions are also available in the PyLith manual
available on the CIG website

  http://www.geodynamics.org/cig/software/pylith/


======================================================================
OVERVIEW
======================================================================

This installer builds the current PyLith release and its dependencies
from source.

PyLith depends on several other libraries, some of which depend on
other libraries. As a result, building PyLith from source can be
tricky and is fraught with potential pitfalls. This installer attempts
to eliminate these obstacles by providing a utility that builds all of
the dependencies in the proper order with the required options in
addition to PyLith itself.

The installer will download the source code for PyLith and all of the
dependencies during the install process, so you do not need to do this
yourself. Additionally, the installer provides the option of checking
out the PyLith and PETSc source code from the Git repositories
(requires git be installed); only use this option if you need the
bleeding edge versions and are willing to rebuild frequently.

If you encounter trouble during the installation, see the
TROUBLESHOOTING section at the end of this file.

======================================================================
System Requirements
======================================================================

PyLith Installer should work on any UN*X system.  It requires the
following language tools:

  * A C compiler.
  * Tar archiving utility
  * wget or curl networking downloaders.

If you are using a modern UN*X system, there is a good chance that the
above tools are already installed.


======================================================================
RUNNING THE INSTALLER
======================================================================

The installer has two basic components: a configure script and a
Makefile. The configure script is used to select which dependencies to
install, verify that any dependencies not selected are available, and
create a shell script containing the appropriate environment variables
to build and use PyLith. The Makefile is used to download all of the
source code, build it in the proper order, and install it to the
desired location. The following sections describe the default
configuration and various common perturbations.

As part of the installation process, the installer will, by default,
run some tests to make sure specific dependencies (PETSc and
spatialdata) as well as PyLith were installed properly.

IMPORTANT: We *STRONGLY* recommend that you run the configure script
  in a different directory from the PyLith Installer source code. We
  recommend creating a build directory (for example,
  $HOME/build/pylith) where you build any software with a subdirectory
  for PyLith. 

IMPORTANT: We also *STRONGLY* recommend that you install PyLith and
  its dependencies to its own directory (for example
  --prefix=$HOME/pylith). This makes it easier to start over should
  you encounter an error, in addition to managing multiple versions or
  different builds.

WARNING: If you need to reconfigure the installer, then you should
  remove all of your build and install files *BEFORE* running
  configure. For example, rm -r $HOME/build/pylith $HOME/pylith

These instructions are written assuming that you have downloaded the
installer source code to $HOME/Downloads and want to use the following
directories:

  * $HOME/src/pylith - directory where the installer source code is
    unpacked

  * $HOME/build/pylith - directory where PyLith and its dependencies
    are built

  * $HOME/pylith - directory to which PyLith is installed

If you choose to use different directories, then you will need to
adjust the commands listed in the instructions to account for this
change.

The installer attempts to keep track of packages that it has installed
by creating files with the syntax installed_PACKAGE where PACKAGE is
mpi, netcdf, etc. This permits you to stop the build process at any
time and return at a later time and pick up from where you left
off. You can trigger a package to be rebuilt by removing the
corresponding PACKAGE-build directory and the installed_PACKAGE file
before running make.

--------------
IMPORTANT NOTE
--------------

  The default settings do not install a compiler suite, Python, or
  MPI. In order for PyLith to work properly, Python and MPI must be
  built with the same compiler suite used by the PyLith installer to
  build all of the other dependencies and PyLith itself. If you are
  using the system Python and compiler suite (usually gcc), these are
  guaranteed to be compatible. The configure tests are relatively
  simple and detect only major incompatibilities; many small
  incompatibilities slip through and only show up during the testing
  phase of the build process.

  You can see which compiler was used to build an installed version of
  Python by starting the Python interpreter (run "python") and
  examining the second line. Likewise you can often identify which
  compiler an MPI version is using by running "mpicc -show".

  To remedy incompatible compiler suite, MPI, and Python versions,
  simply request the installer to build a new version of the
  incompatible package (e.g., --enable-python, --enable-mpi=openmpi).


----------------------------------------------------------------------
STEP 1 - Download and unpack the installer
----------------------------------------------------------------------

Download the installer.

  http://www.geodynamics.org/cig/software/pylith/pylith-installer-2.1.0-3.tgz

Untar the source code for the installer:

  mkdir -p $HOME/src/pylith
  cd $HOME/src/pylith
  mv $HOME/Downloads/pylith-installer-2.1.0-3.tgz
  tar -zxf pylith-installer-2.1.0-3.tgz


----------------------------------------------------------------------
STEP 2 - Run configure
----------------------------------------------------------------------

Read the previous section "RUNNING THE INSTALLER"!!

On multi-core and multi-processor systems (not clusters but systems
with more than one core and/or processor), the build process can be
sped up by using multiple threads when running "make". Use the
configure argument --with-make-threads=NTHREADS where NTHREADS is the
number of threads to use (1, 2, 4, 8, etc). The default is to use only
one thread. In the examples below, we set the number of threads to 2.

The examples below is not an exhaustive list of configure settings,
rather it is a list of common combinations. You can enable/disable
building each package to select the proper set of dependencies that
need to be built. 

Run configure with --help to see all of the command line arguments.

  $HOME/src/pylith/pylith-installer-2.1.0-3/configure --help

-------
DEFAULT
-------

  The default installation assumes you have
    * C, C++, and Fortran compilers
    * Python 2.6 or later
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------------
WITHOUT FORTRAN
---------------

  The default installation assumes you have
    * C, C++, and Fortran compilers
    * Python 2.6 or later
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --with-fortran=no \
    --with-make-threads=2 \
    --petsc_options="--download-chaco=1 --download-c-blas-lapack=1" \
    --prefix=$HOME/pylith

---------------------
DESKTOP-LINUX-MINIMAL
---------------------

  In this case we assume most of the dependencies have been installed
  via a package manager. We do build HDF5 to insure that it is built
  with the MPI used by PETSc and PyLith.

  We assume you have
    * C, C++, Fortran compilers
    * Python 2.6 or later
    * MPI
    * NetCDF 3.6.2 or 4.1.1
    * Proj4
    * Numpy
    * cppunit

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --disable-cppunit \
    --disable-numpy \
    --disable-proj4 \
    --disable-netcdf \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------------------
DESKTOP-LINUX-OPENMPI
---------------------

  In this case we assume MPI does not exist on your system and you
  want to use the OpenMPI implementation. We must also build Python
  to insure compatibility between the link flags for MPI and Python.
  
  We assume you have
    * C, C++, Fortran compilers

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --enable-python \
    --enable-mpi=openmpi \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

--------------
DESKTOP-DARWIN
--------------

  Apple does not include a Fortran compiler with XCode. Although it is
  possible to sometimes install a binary version of the compiler or
  use a Darwin package manager, such as Fink or MacPorts, these can have
  their own sets of problems (e.g., incompatibilities, additional
  dependencies, etc).

  Prior to OS X 10.10 (Yosemite) a more robust solution is to build
  the gfortran compiler.

  For OS X 10.10 (Yosemite), gcc may not be able to build Python due
  to incompatiblities between gcc and clang in the system header
  files. In this case, it is best to use clang and build PyLith with
  Fortran support.

  We also build openmpi in this case because we want a Fortran
  compiler setup for MPI. Installing MPI, in turn, forces installtion
  of Python to insure compatibility in link flags between MPI and
  Python. Finally, we use curl to download files because it is
  included in OS X but wget is not.
  
  We assume you have
    * C/C++ compilers

  With Fortran support:

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --enable-gcc=fortran \
    --enable-python \
    --enable-mpi=openmpi \
    --with-fetch=curl \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

  Without Fortran support:

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --enable-mpi=openmpi \
    --with-fetch=curl \
    --with-make-threads=2 \
    --with-petsc-options="--download-chaco=1 --download-fblaslapack=1" \
    --prefix=$HOME/pylith

-------
CLUSTER
-------

  We assume the cluster has been configured with compilers and MPI
  appropriate for the hardware. We assume that Python has not been
  installed or was not built with the selected compiler suite. So we
  assume you have
    * C, C++, Fortran compilers
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --enable-python \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------
DEVELOPER
---------

  **WARNING** Recommended for expert users only!

  In this case we checkout the PETSc, spatialdata, and PyLith source
  code from the corresponding repositories using the current PyLith
  stable tree. To use another the development trunk, use
  --with-pylith-git=master; to specify another branch or tree use
  --with-pylith-git=BRANCH where BRANCH is the name of the branch
  (e.g., v1.9-stable) in the GitHub repository.

  We assume you have
    * C, C++, Fortran compilers
    * Python 2.6 or later
    * MPI
    * Subversion
    * Mercurial

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-2.1.0-3/configure \
    --with-pylith-git=master \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------
CUDA SUPPORT
---------

  **WARNING** Recommended for expert users only!

  You must have installed the CUDA toolkit and driver. If your GPU
  does not support double-precision floating point operations you must
  build PETSc with single-precision support (which does not work with
  some PETSc external packages such as ParMetis/Metis and ML).

  Add the following option to the installer configure:
    --with-cuda

  If building PETSc in single precision, also add
    --petsc_options="--with-precision=single"

  If you installed cusp to a custom location, then also add
    --petsc_options="--with-cusp-dir=REPLACE_WITH_CUSP_DIR"


----------------------------------------------------------------------
STEP 3 - Setup your environment
----------------------------------------------------------------------

Setup your environment variables (as indicated in the output of the
configure script).

  cd $HOME/build/pylith
  source setup.sh


----------------------------------------------------------------------
STEP 4 - Build the software
----------------------------------------------------------------------

Build all of the required dependencies and then PyLith. You do not
need to run "make install", because the installer includes this step
in the make process.

  make

NOTE 

  Depending on the speed and memory of your machine and the number of
  dependencies and which ones need to be built, the build process can
  take anywhere from about ten minutes to several hours. As discussed
  above you can interrupt the build process and continue at a later
  time from where you left off.

  If you get error messages while running make with multiple threads,
  then try running make again as not all packages fully support
  parallel builds. You can also go to the build directory of the
  package and run "make" before running make in $HOME/build/pylith
  again to resume the build process. For example,

    cd netcdf-build
    make


----------------------------------------------------------------------
STEP 5 - Verify the installation
----------------------------------------------------------------------

Run your favorite PyLith example or test problem to insure that PyLith
was installed properly.

Add the line

  . $HOME/build/pylith/setup.sh

to your .bashrc (or other appropriate file) or manually add the
environment variables from setup.sh to your .bashrc (or other
appropriate file) so that the environment is setup properly
automatically every time you open a shell.


======================================================================
TROUBLESHOOTING
======================================================================

----------------------------------------------------------------------
Hints
----------------------------------------------------------------------

1. Did you forget STEP 3?

   If you added the PyLith environment variables to your shell setup
   (.bashrc), check to make sure the PyLith directory is listed before
   other directories in your PATH, LD_LIBRARY_PATH (for Linux),
   DYLD_LIBRARY_PATH (for Darwin), and PYTHONPATH.

2. If you run into an error and change something (compiler,
   environment variable, etc), you should reconfigure and rebuild.

  a. Remove the build and install directories ($HOME/build/pylith and
    $HOME/pylith).

    rm -r $HOME/build/pylith and $HOME/pylith

  b. Try again starting at STEP 2.

----------------------------------------------------------------------
numpy fails to build due to a blas/lapack problem
----------------------------------------------------------------------

If a bad version of blas/lapack if found while installing numpy,
resulting in an error, follow the steps below to force numpy to build
blas/lapack itself.

  1. cd numpy-1.5.1
  2. cp site.cfg.example site.cfg
  3. Change

     #[DEFAULT]
     #library_dirs = /usr/local/lib
     #include_dirs = /usr/local/include

     to

     [DEFAULT]
     library_dirs = /dev/null
     include_dirs = /dev/null

  4. cd $HOME/build/pylith
  5. make

----------------------------------------------------------------------
netcdf and HDF5 Fortran libraries fail to link with ifort
----------------------------------------------------------------------

This can be associated with bugs in libtool. Check to make sure the
"pic_flag" and "wl" parameters are set in the Fortan sections. They
should be set via something like:

  pic_flag=" -fPIC"
  wl="-Wl,"

In the netcdf build directory do "make clean" and then "make" to
regenerate the object files with these flags. After the build
succeeds, run "touch installed_netcdf" in the top-level directory.

----------------------------------------------------------------------
The clang compiler detects error building ncgen3
----------------------------------------------------------------------

From http://www.unidata.ucar.edu/software/netcdf/docs/known_problems.html#clang-ncgen3

The clang compiler (default on OSX 10.9 Mavericks) detects an error
building ncgen3

Building the netCDF C library with the clang C compiler, the default
/usr/bin/cc on OSX 10.9 Mavericks, detects an error in compiling
ncgen3/load.c:

In file included from ../../netcdf-4.1.3/ncgen3/load.c:14:
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: error: expected parameter declarator
extern size_t strlcat(char *dst, const char *src, size_t siz);
              ^
/usr/include/secure/_string.h:111:44: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
                                           ^
/usr/include/secure/_common.h:39:62: note: expanded from macro '__darwin_obsz'
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1 ? 1 : 0)
                                                             ^
/usr/include/secure/_common.h:30:32: note: expanded from macro '_USE_FORTIFY_LEVEL'
#    define _USE_FORTIFY_LEVEL 2
                               ^
In file included from ../../netcdf-4.1.3/ncgen3/load.c:14:
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: error: expected ')'
/usr/include/secure/_string.h:111:44: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
                                           ^
/usr/include/secure/_common.h:39:62: note: expanded from macro '__darwin_obsz'
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1 ? 1 : 0)
                                                             ^
/usr/include/secure/_common.h:30:32: note: expanded from macro '_USE_FORTIFY_LEVEL'
#    define _USE_FORTIFY_LEVEL 2
                               ^
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: note: to match this '('
/usr/include/secure/_string.h:111:44: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
                                           ^
/usr/include/secure/_common.h:39:53: note: expanded from macro '__darwin_obsz'
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1 ? 1 : 0)
                                                    ^
In file included from ../../netcdf-4.1.3/ncgen3/load.c:14:
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
extern size_t strlcat(char *dst, const char *src, size_t siz);
              ^
/usr/include/secure/_string.h:111:44: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
                                           ^
/usr/include/secure/_common.h:39:31: note: expanded from macro '__darwin_obsz'
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1 ? 1 : 0)
                              ^
In file included from ../../netcdf-4.1.3/ncgen3/load.c:14:
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: error: conflicting types for '__builtin___strlcat_chk'
/usr/include/secure/_string.h:111:3: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
  ^
../../netcdf-4.1.3/ncgen3/genlib.h:85:15: note: '__builtin___strlcat_chk' is a builtin with type 'unsigned long (char *, const char *, unsigned
      long, unsigned long)'
/usr/include/secure/_string.h:111:3: note: expanded from macro 'strlcat'
  __builtin___strlcat_chk (dest, src, len, __darwin_obsz (dest))
  ^
1 warning and 3 errors generated.
make: *** [load.o] Error 1


A fix is to insert the line

#include <config.h>
above the "#include <stdlib.h>" statement near the beginning of ncgen3/genlib.h.
